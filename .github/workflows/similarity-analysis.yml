name: Repository Similarity Analysis

on:
  workflow_dispatch:  # Allow manual trigger
    inputs:
      targetRepo:
        description: 'Target repository URL'
        required: true
      sourceExcludes:
        description: 'Exclude patterns for source repo (comma-separated, e.g., "*/test/*,*/build/*")'
        required: false
      targetExcludes:
        description: 'Exclude patterns for target repo (comma-separated, e.g., "*/test/*,*/build/*")'
        required: false
      sourceFailOnError:
        description: 'Fail workflow if source baseline generation encounters errors'
        required: false
        type: boolean
        default: false
      targetFailOnError:
        description: 'Fail workflow if target baseline generation encounters errors'
        required: false
        type: boolean
        default: false

jobs:
  similarity-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tree-sitter tree-sitter-cpp rapidfuzz pybloom-live
    
    - name: Clone source and target repositories
      run: |
        echo "Cloning target repository..."
        git clone --depth 1 ${{ github.event.inputs.targetRepo }} ../../target
        echo "Target repository cloned."
    
    - name: Generate baseline for source repository
      run: |
        echo "Generating baseline for source repository..."
        
        # Build exclude arguments from comma-separated input
        EXCLUDE_ARGS=""
        if [ -n "${{ github.event.inputs.sourceExcludes }}" ]; then
          IFS=',' read -ra EXCLUDES <<< "${{ github.event.inputs.sourceExcludes }}"
          for exclude in "${EXCLUDES[@]}"; do
            EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude \"$exclude\""
          done
        fi
        
        # Add fail-on-error flag if enabled
        FAIL_ON_ERROR=""
        if [ "${{ github.event.inputs.sourceFailOnError }}" == "true" ]; then
          FAIL_ON_ERROR="--fail-on-error"
        fi
        
        # Run the baseline generation with exclude arguments
        eval "python3 tools/SimilarityChecker/generate_baseline_treesitter.py /home/runner/work/documentdb/documentdb source_baseline.json $EXCLUDE_ARGS $FAIL_ON_ERROR"
        
        echo "Source baseline generation completed."
        echo "Generated $(jq length source_baseline.json) unique string patterns."
    
    - name: Generate baseline for target repository
      run: |
        echo "Generating baseline for target repository..."
        
        # Build exclude arguments from comma-separated input
        EXCLUDE_ARGS=""
        if [ -n "${{ github.event.inputs.targetExcludes }}" ]; then
          IFS=',' read -ra EXCLUDES <<< "${{ github.event.inputs.targetExcludes }}"
          for exclude in "${EXCLUDES[@]}"; do
            EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude \"$exclude\""
          done
        fi
        
        # Add fail-on-error flag if enabled
        FAIL_ON_ERROR=""
        if [ "${{ github.event.inputs.targetFailOnError }}" == "true" ]; then
          FAIL_ON_ERROR="--fail-on-error"
        fi
        
        # Run the baseline generation with exclude arguments
        eval "python3 tools/SimilarityChecker/generate_baseline_treesitter.py /home/runner/work/target target_baseline.json $EXCLUDE_ARGS $FAIL_ON_ERROR"

        echo "Target baseline generation completed."
        echo "Generated $(jq length target_baseline.json) unique string patterns."
    
    - name: Compare repositories using RapidFuzz
      run: |
        echo "Comparing repositories using RapidFuzz..."
        python3 tools/SimilarityChecker/rapidfuzz_file_compare.py \
          source_baseline.json \
          target_baseline.json \
          --threshold 70 \
          --max-matches 10
        
        # Find the generated comparison files
        MATCHES_FILE=$(ls *_matches_*pct_*.json | head -1)
        UNMATCHED_FILE=$(ls *_unmatched_*pct_*.json | head -1)
        
        echo "Comparison completed."
        echo "Matches file: $MATCHES_FILE"
        echo "Unmatched file: $UNMATCHED_FILE"
    
    - name: Upload baseline files
      uses: actions/upload-artifact@v4
      with:
        name: similarity-analysis-baselines-${{ github.run_number }}
        path: |
          source_baseline.json
          target_baseline.json
        retention-days: 30
    
    - name: Upload comparison results
      uses: actions/upload-artifact@v4
      with:
        name: similarity-analysis-results-${{ github.run_number }}
        path: |
          *_matches_*pct_*.json
          *_unmatched_*pct_*.json
        retention-days: 30
    
    - name: Upload analysis logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: similarity-analysis-logs-${{ github.run_number }}
        path: |
          *.log
        retention-days: 7
        if-no-files-found: ignore